import type { PromptActionOptions } from '@johnsonhuang4396/api-smasher'
import type { Plugin } from 'vite'
import process, { exit } from 'node:process'
import { createInterface } from 'node:readline'
import { generateApi } from '@johnsonhuang4396/api-smasher'

let isListening = false
let rl: ReturnType<typeof createInterface>

function createRl(options: PromptActionOptions): void {
  rl = createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: '> '
  })

  // ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
  // eslint-disable-next-line no-console
  console.log('\nüöÄ API Smasher is ready!')
  // eslint-disable-next-line no-console
  console.log('Type "api-smasher" or "as" to generate API files\n')
  rl.prompt()

  // ÁõëÂê¨Áî®Êà∑ËæìÂÖ•
  rl.on('line', async (input) => {
    const command = input.trim().toLowerCase()
    if (command === 'api-smasher' || command === 'as') {
      try {
        await generateApi({
          ...options,
          autoRun: false
        })
        // eslint-disable-next-line no-console
        console.log('\n‚úÖ API Smasher created successfully')
        rl.prompt()
      }
      catch (error) {
        console.error('‚ùå API generation failed:', error instanceof Error ? error.message : String(error))
        rl.close()
        isListening = false
        createRl(options)
      }
    }
  })

  // Â§ÑÁêÜ‰∏≠Êñ≠‰ø°Âè∑
  process.on('SIGINT', () => {
    if (rl) {
      rl.close()
      isListening = false
    }
  })

  // Â§ÑÁêÜÈîôËØØ
  rl.on('error', (error) => {
    console.error('‚ùå Input error:', error.message)
    rl.prompt()
  })

  // Â§ÑÁêÜÂÖ≥Èó≠
  rl.on('close', () => {
    isListening = false
    // eslint-disable-next-line no-console
    console.log('\nüëã API Smasher stopped')
    exit(0)
  })
}

export interface VitePluginApiSmasherOptions extends PromptActionOptions { }

export default function apiSmasher(options: VitePluginApiSmasherOptions): Plugin {
  return {
    name: 'vite-plugin-api-smasher',
    apply: 'serve',
    configureServer() {
      if (isListening)
        return

      isListening = true

      // ÂàõÂª∫ readline Êé•Âè£
      createRl(options)
    },
    closeBundle() {
      if (rl) {
        rl.close()
        isListening = false
      }
    }
  }
}
